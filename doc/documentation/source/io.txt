.. _io-subsystem:

IO Subsystem
============

The Input Output Subsystem uses a NFS library to access files over the network and a serial library to support a console.

File System
-----------

To understand the Serial IO and :abbr:`NFS (Network File System)` parts, we need to explain the design of our file system first. Not only the real files that we can access over the :abbr:`NFS (Network File System)`, but also the "Console", the only way a user can interact with our system, is modeled as a file residing in our file system. If a user program wants to write to the console or read from it, it simply opens the file called "console" like any other file and performs normal file writing/reading operations on it (see :ref:`serial-io` for details).

Server side implementation
^^^^^^^^^^^^^^^^^^^^^^^^^

File system related code resides in the :file:`src/sos/io` directory. Our file system has no support for directories and can only handle a limited number of files (limited to ``DIR_CACHE_SIZE`` defined in :file:`io.h:32`). We maintain a file cache (a static array called ``file_cache``) that allows ``DIR_CACHE_SIZE`` possible entries of type ``file_info``. At boot time, the system uses NFS to find files in a specific directory of the connected host and creates a ``file_info`` entry in the file_cache for each file found. The system is not able to detect changes to files on the host or new added files, unless they are created by our own file system of course.

If we take a closer look at the ``file_info`` type (see :file:`io.h:14`) we can see that we store function pointers for all the file operations here. This allows us to be able to specify a different behaviour for every file. We use this form of dynamic dispatching to figure out at runtime (based on the file) if the serial I/O functions should be invoked or rather the ones that deal with NFS.

The second data structure defined in :file:`io.h:36` is a structure called ``file_table_entry``. It is used to hold information about files which are currently opened by a process. Each user process has its own file table in the process descriptor. It contains pointers to the type ``file_table_entry``. If a file is created/opened, one of these structure is allocated and stored in the file table.

To enable user processes to access the file system, there are system call handlers defined in :file:`io.c` for all the different file operations. These function do some general checks before dispatching to the corresponding function in the ``file_info`` structure. The specialized handler functions are located in :file:`io_serial.c` and :file:`io_nfs.c` respectively. An example of an I/O syscall is shown in the diagram :ref:`io-read`.


.. _serial-io:

Serial I/O
----------

The serial I/O system is a very important part of the system, because it ultimately enables the user to communicate with our system. Since the NSLU2 system does not have a display but only a network adapter, it has to send its output over the network to the host computer. This is also the way in which a program running on our system can get inputs from the user.

Reading from and writing to this kind of "console" are modeled as normal file access operations, but on a specially designed, virtual file. At boot time, we initialize the first entry of the file cache to become that virtual file with the name "console", creation and access time 0, read- and writable and so on (``io_init()`` in :file:`io.c`). But most importantly we set its file operation function pointers to different functions than we would for one of the "real" files. The four pointers are set to ``open_serial()``, ``read_serial()``, ``write_serial()`` and ``close_serial()``, which can all be found in the file :file:`io_serial.c`.

The function ``open_serial()`` is different from its pendant ``open_nfs()`` in the sense, that for the console we have to ensure that only one process at a time is allowed to open the "file" in read mode. The reason for this is that if we enter something into the console, it is not reasonable to send the same input to several different processes. The ``close_serial()`` function ensures, that the exclusive read right is reset correctly, so that at a later time another process can acquire it.

The function ``write_serial()`` basically invokes the serial drivers ``serial_send`` function, that sends strings over the network to the net cat instance that is listening on port 26706. If sending fails, ``write_serial()`` tries to resend the buffer 20 times before it is discarded.

The function ``read_serial()`` reads characters from the circular buffer in the file info structure of the console file. The circular buffer gets filled by the callback function ``serial_receive_handler()`` which is registered to the serial driver in ``console_init`` which is called in ``io_init()`` (line 194) on system boot time.

Every process gets created with a pre-initialized file descriptor 0 which has write capability for the console file. In milestone 0, we were supposed to implement the two user space functions ``sos_write()`` and ``sos_read()`` which are used by the C library for its I/O functions. Back then, they just called the respective system calls directly, but now we replaced that code so it just performs the needed file operations on the console file.


Network File System
-------------------

The code for accessing the real files over NFS on the host PC is found in the file :file:`io_nfs.c`. It contains the handlers for read, write, open, getdirent and stat system calls specific to the :abbr:`NFS (Network File System)`. The usual behaviour is that the ``create_nfs()``, ``read_nfs()`` and ``write_nfs()`` call the :abbr:`NFS (Network File System)` library function which (after a reply has been received from the network) calls a supplied callback function in return. We use the token value as a pointer to the file handle and store all the information about what we need to do on a callback in the file handle.

Note that ``open_nfs()`` does reply immediately. We don't need to do a NFS call over network first because we already cache the NFS file handle in the file cache.

.. _io-read:

.. figure:: _images/io_read.png
    :scale: 110%
    :alt: Flow of events on file read

    Flow of events during a read operation
